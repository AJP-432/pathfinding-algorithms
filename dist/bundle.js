(()=>{"use strict";const t=new class{constructor(){this.gridCount=50,this.unitSize=700/this.gridCount,this.internalBoard,this.displayBoard=document.querySelector(".board"),this.cellStates={EMPTY:1,START:2,END:3,WALL:4,WEIGHT:5,PATH:6,VISITED:7},this.startNode=null,this.endNode=null,this.offsets=[[1,0],[0,1],[-1,0],[0,-1]]}selectDisplayCell(t,e){return document.querySelector(`div[data-row='${t}'][data-col='${e}']`)}generateBoard(e=this.gridCount){this.internalBoard=null,this.generateDisplayBoard(e),this.generateInternalBoard(e),document.getElementById("reset").addEventListener("click",(()=>{this.resetBoard()}));const s=document.getElementById("terrains");s.addEventListener("change",(()=>{switch(s.value){case"plain":t.resetBoard();break;case"random":t.generateRandomBoard();break;case"random-weighted":t.generateRandomWeightedBoard();break;case"maze-dfs":t.generateMazeDFSBoard()}}))}generateDisplayBoard(t=this.gridCount){const e=document.querySelector(".board");e.innerHTML="";for(let s=0;s<2*t;s++){const a=document.createElement("div");a.dataset.col=`${s}`,a.style.width="100%",a.style.height=`${this.unitSize}px`;for(let e=0;e<t;e++){const t=document.createElement("div");t.dataset.row=`${e}`,t.dataset.col=`${s}`,t.style.width=`${this.unitSize}px`,t.style.height=`${this.unitSize}px`,t.classList.add("cell"),t.dataset.state=this.cellStates.EMPTY,t.addEventListener("mousedown",(t=>{const e=parseInt(t.target.dataset.row,10),s=parseInt(t.target.dataset.col,10);this.setCellNode(e,s)})),t.addEventListener("dragover",(t=>{const e=parseInt(t.target.dataset.row,10),s=parseInt(t.target.dataset.col,10);this.setCellNode(e,s)})),t.addEventListener("dblclick",(t=>{const e=parseInt(t.target.dataset.row,10),s=parseInt(t.target.dataset.col,10);this.unsetCellNode(e,s)})),a.appendChild(t)}e.appendChild(a)}}generateInternalBoard(t=this.gridCount){this.internalBoard=Array.from({length:t},(()=>Array.from({length:2*t},(()=>this.cellStates.EMPTY))))}async generateRandomBoard(){this.resetBoard();const t=t=>new Promise((e=>setTimeout(e,t)));for(let e=0;e<this.gridCount;e++)for(let s=0;s<2*this.gridCount;s++)Math.random()<.2&&(this.setCellNode(e,s,"wall"),await t(.001))}async generateRandomWeightedBoard(){this.resetBoard();const t=t=>new Promise((e=>setTimeout(e,t)));for(let e=0;e<this.gridCount;e++)for(let s=0;s<2*this.gridCount;s++){let a;a=Math.random()<.5?"wall":"weight",Math.random()<.2&&(this.setCellNode(e,s,a),await t(.001))}}isValid(t,e){return t>=0&&t<this.gridCount&&e>=0&&e<2*this.gridCount}async generateMazeDFSBoard(){this.resetBoard();const t=t=>new Promise((e=>setTimeout(e,t)));for(let t=0;t<this.gridCount;t++)for(let e=0;e<2*this.gridCount;e++)this.setCellNode(t,e,"wall");let e=[[20,20]],s=[];for(;0!=e.length||0!=s.length;){let a,l;await t(.2),0!==e.length?[a,l]=e.pop():[a,l]=s.pop();let o=0;for(let t=0;t<4;t++){let s=a+this.offsets[t][0],n=l+this.offsets[t][1];this.isValid(s,n)?this.internalBoard[s][n]!==this.cellStates.EMPTY&&o===t&&(this.setCellNode(s,n,"empty"),e.push([s,n])):(e.push([a,l]),o+=1,4==o&&(o=0))}}}setCellNode(t,e,s=null){if(t<0||t>=this.gridCount||e<0||e>=2*this.gridCount)return;const a=document.getElementById("node-types"),l=this.selectDisplayCell(t,e);let o=a.value;switch(null!=s&&(o=s),this.unsetCellNode(t,e),o){case"empty":l.dataset.state=this.cellStates.EMPTY,l.className="cell",this.internalBoard[t][e]=this.cellStates.EMPTY;break;case"start":this.startNode=[t,e],l.dataset.state=this.cellStates.START,l.classList.add("start-node"),this.internalBoard[t][e]=this.cellStates.START;break;case"end":const s=document.querySelector(".end-node");s&&s.classList.remove("end-node"),this.endNode=[t,e],l.dataset.state=this.cellStates.END,l.classList.add("end-node"),this.internalBoard[t][e]=this.cellStates.END;break;case"wall":l.dataset.state=this.cellStates.WALL,l.classList.add("wall-node"),this.internalBoard[t][e]=this.cellStates.WALL;break;case"weight":l.dataset.state=this.cellStates.WEIGHT,l.classList.add("weight-node"),this.internalBoard[t][e]=this.cellStates.WEIGHT}}unsetCellNode(t,e){if(t<0||t>=this.gridCount||e<0||e>=2*this.gridCount)return;const s=this.selectDisplayCell(t,e);if(s.dataset.state!=this.cellStates.EMPTY)switch(this.internalBoard[t][e]=this.cellStates.EMPTY,parseInt(s.dataset.state,10)){case this.cellStates.START:this.startNode=null,s.classList.remove("start-node");break;case this.cellStates.END:this.endNode=null,s.classList.remove("end-node");break;case this.cellStates.WALL:s.classList.remove("wall-node");break;case this.cellStates.WEIGHT:s.classList.remove("weight-node")}s.dataset.state=this.cellStates.EMPTY}resetBoard(){this.startNode=null,this.endNode=null,this.generateBoard(this.gridCount),console.log(this.internalBoard)}},e=[[1,0],[0,1],[-1,0],[0,-1]];function s(e,s){return 0<=e&&e<t.gridCount&&0<=s&&s<2*t.gridCount&&t.internalBoard[e][s]!=t.cellStates.VISITED&&t.internalBoard[e][s]!=t.cellStates.START&&t.internalBoard[e][s]!=t.cellStates.WALL}function a(e){console.log("This is the DRAWER"),console.log(e);for(let s=1;s<e.length;s++){const a=e[s],l=t.selectDisplayCell(a[0],a[1]);l.classList.contains("visited-node")&&l.classList.remove("visited-node"),l.classList.add("path-node")}}function l(e,s){const a=t.selectDisplayCell(e,s);a.classList.add("visited-node"),a.dataset.state=t.cellStates.VISITED,t.internalBoard[e][s]=t.cellStates.VISITED}function o(t,e){let s,a=0,l=t.length-1;for(;a<=l;){if(s=Math.floor((a+l)/2),t[s][2]==e[2])return void t.splice(s,0,e);t[s][2]<e[2]?a=s+1:l=s-1}t.splice(a,0,e)}t.generateBoard(),console.log(t.internalBoard),document.getElementById("navigate").addEventListener("click",(n=>{!function(){switch(document.getElementById("algorithms").value){case"bfs":!async function(){let o=null,n=[[t.startNode,[]]];const i=t=>new Promise((e=>setTimeout(e,t)));for(;!o&&0!=n.length;){let[r,d]=n.shift();for(let c=0;c<4;c++){let h=[r[0]+e[c][0],r[1]+e[c][1]];if(s(h[0],h[1])){const e=t.selectDisplayCell(h[0],h[1]);e.classList.add("looking-node");let s=d.concat([r]);const c=parseInt(t.internalBoard[h[0]][h[1]],10);switch(await i(.5),c){case t.cellStates.END:return o=s,console.log("This is the path"),console.log(o),a(o),e.classList.remove("looking-node"),o;case t.cellStates.EMPTY:n.push([h,s])}e.classList.remove("looking-node"),l(h[0],h[1])}}}}();break;case"dfs":!async function(){let o=null,n=[[t.startNode,[]]],i=[];const r=t=>new Promise((e=>setTimeout(e,t)));for(;!o&&(0!=n.length||0!=i.length);){let d,c,h=!1;0!=n.length?[d,c]=n.pop():([d,c]=i.pop(),h=!0);let g=!0;for(let u=0;u<4;u++){let f,m;if(h?(f=d,m=c):(f=[d[0]+e[u][0],d[1]+e[u][1]],m=c.concat([d])),s(f[0],f[1]))if(g){console.log("FIRSTIME");const e=t.selectDisplayCell(f[0],f[1]);e.classList.add("looking-node");const s=parseInt(t.internalBoard[f[0]][f[1]],10);switch(await r(.5),s){case t.cellStates.END:return o=m,console.log("This is the path"),console.log(o),a(o),e.classList.remove("looking-node"),o;case t.cellStates.EMPTY:n.push([f,m])}if(e.classList.remove("looking-node"),l(f[0],f[1]),g=!1,h)break}else console.log("LASTIME"),i.push([f,m])}}}();break;case"dijkstra":!async function(){let n=null,i=[[t.startNode,[],0]];const r=t=>new Promise((e=>setTimeout(e,t)));for(;!n&&0!=i.length;){let[d,c,h]=i.shift();for(let g=0;g<4;g++){let u=[d[0]+e[g][0],d[1]+e[g][1]];if(s(u[0],u[1])){const e=t.selectDisplayCell(u[0],u[1]);e.classList.add("looking-node");const s=parseInt(t.internalBoard[u[0]][u[1]],10);let g=c.concat([d]),f=s==t.cellStates.WEIGHT?h+10:h+1;switch(await r(.5),s){case t.cellStates.END:return n=g,console.log("This is the path"),console.log(n),a(n),e.classList.remove("looking-node"),n;case t.cellStates.EMPTY:case t.cellStates.WEIGHT:o(i,[u,g,f])}e.classList.remove("looking-node"),l(u[0],u[1]),console.log(i)}}}}(),console.log(t.internalBoard);break;case"astar":!async function(){let n=null,i=[[t.startNode,[],0]],r=[];const d=t=>new Promise((e=>setTimeout(e,t)));for(;!n&&(0!=i.length||0!=r.length);){let g,u,f,m,S,p;if(0!=i.length){[g,f,S]=i.shift();const a=e.map((t=>[g[0]+t[0],g[1]+t[1]]));let l=[];for(let e of a)if(s(e[0],e[1])){const s=parseInt(t.internalBoard[e[0]][e[1]],10);o(l,[e,f.concat([g]),s==t.cellStates.WEIGHT?S+10+c(e,t.endNode):S+1+c(e,t.endNode)])}if(l.length){[u,m,p]=l.shift();for(let t of l)h(r,t)||o(r,t)}else[u,m,p]=r.shift()}else[u,m,p]=r.shift();const T=t.selectDisplayCell(u[0],u[1]);T.classList.add("looking-node");const B=parseInt(t.internalBoard[u[0]][u[1]],10);if(await d(.5),B===t.cellStates.END)return n=m,a(n),T.classList.remove("looking-node"),n;o(i,[u,m,p]),T.classList.remove("looking-node"),l(u[0],u[1])}function c(t,e){return Math.abs(t[0]-e[0])+Math.abs(t[1]-e[1])}function h(t,e){for(let s of t)if(s[0]==e[0])return!0;return!1}}();break;default:console.error("Unknown algorithm selected")}}()}))})();